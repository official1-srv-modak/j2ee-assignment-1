package crud.service;

import com.google.gson.*;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class CrudService {

    private String filePath;
    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();

    public CrudService() {
    }
    
    
    

	public String getFilePath(Object obj) {
        this.filePath = obj.getClass().getSimpleName()+".json";
        return this.filePath;
	}




	// Get all products (as Objects) from the file
	public List<Object> getAll(Object obj) throws IOException {
	    filePath = getFilePath(obj);
	    File file = new File(filePath);
	    if (!file.exists()) {
	        return new ArrayList<>();
	    }

	    // Read the file
	    try (FileReader reader = new FileReader(file)) {
	        JsonArray jsonArray = gson.fromJson(reader, JsonArray.class);
	        List<Object> objectList = new ArrayList<>();
	        
	        // Add each JsonElement as Object to the list
	        jsonArray.forEach(jsonElement -> objectList.add(gson.fromJson(jsonElement, Object.class)));
	        
	        return objectList;
	    }
	}

    // Get a single product by its ID
	// Get a single product by its ID
	public Object getById(String id, Object obj) throws IOException {
	    return getAll(obj).stream()
	            .filter(item -> {
	                if (item instanceof Map) {
	                    Map<String, Object> map = (Map<String, Object>) item;
	                    return map.containsKey("id") && id.equals(map.get("id").toString());
	                }
	                return false; // Handle only Map objects (or adapt this for other types if needed)
	            })
	            .findFirst()
	            .orElse(null);
	}


    // Save all products to the file
    public void saveAll(List<JsonObject> jsonObjectList, Object obj) throws IOException { // Should accept the object
        JsonArray jsonArray = new JsonArray();
        jsonObjectList.forEach(jsonArray::add);
        
        this.filePath = getFilePath(obj);

        try (FileWriter writer = new FileWriter(filePath)) {
            gson.toJson(jsonArray, writer);
        }
    }

    // Add a new product
    public void add(Object obj) throws IOException { // again should accept object
        List<JsonObject> jsonObjectList = getAll(obj);
        JsonObject newJsonObject = convertToJson(obj);
        jsonObjectList.add(newJsonObject);
        saveAll(jsonObjectList, obj);
    }

    // Update an existing product by its ID
    public void update(String id, JsonObject updatedJsonObject, Object obj) throws IOException { // again should accept object
        List<JsonObject> jsonObjectList = getAll(obj);
        jsonObjectList = jsonObjectList.stream().map(jsonObject -> {
            if (jsonObject.has("id") && jsonObject.get("id").getAsString().equals(id)) {
                return updatedJsonObject;
            }
            return jsonObject;
        }).collect(Collectors.toList());
        saveAll(jsonObjectList, obj);
    }

    // Delete a product by its ID
    public void delete(String id, Object obj) throws IOException { // Guess this is fine
        List<JsonObject> jsonObjectList = getAll(obj);
        jsonObjectList.removeIf(jsonObject -> jsonObject.has("id") && jsonObject.get("id").getAsString().equals(id));
        saveAll(jsonObjectList, obj);
    }
    
    public JsonObject convertToJson(Object object) {
        JsonObject jsonObject = gson.toJsonTree(object).getAsJsonObject();
        return jsonObject;
    }
}
